{"version":3,"sources":["redux/contacts/contacts-actions.js","redux/contacts/contacts-reducer.js","redux/auth/auth-operations.js","redux/auth/auth-slice.js","redux/contacts/contacts-operations.js","redux/contacts/contacts-slice.js","redux/store.js","components/AppBar/AppBar.styled.js","components/Navigation/Navigation.styled.js","redux/auth/auth-selectors.js","components/Navigation/Navigation.jsx","components/AuthNavigation/AuthNavigation.styled.js","components/AuthNavigation/AuthNavigation.jsx","components/UserMenu/UserMenu.styled.js","components/UserMenu/UserMenu.jsx","components/AppBar/AppBar.jsx","views/HomeView/HomwView.styled.js","views/HomeView/HomeView.jsx","views/MaterialLoginView/MaterialLoginView.styled.js","views/MaterialLoginView/MaterialLoginView.jsx","components/Contacts/ContactForm/ContactForm.styled.js","components/Contacts/ContactForm/ContactForm.jsx","components/Contacts/Filter/Filter.styled.js","redux/contacts/contacts-selectors.js","components/Contacts/Filter/Filter.jsx","components/Contacts/ContactItem/ContactItem.styled.js","components/Contacts/ContactItem/ContactItem.jsx","components/Contacts/ContactList/ContactList.styled.js","components/Contacts/ContactList/ContactList.jsx","views/ContactsView/ContactsView.styled.js","views/ContactsView/ContactsView.jsx","views/MaterialSignUpView/MaterialSignUpView.styled.js","views/MaterialSignUpView/MaterialSignUpView.jsx","components/App/App.jsx","reportWebVitals.js","index.js"],"names":["changeFilter","createAction","filteredReducer","createReducer","actions","_","payload","axios","defaults","baseURL","token","headers","common","Authorization","signup","createAsyncThunk","credentials","a","post","data","logIn","console","log","logOut","authSlice","createSlice","name","initialState","user","email","isLoggedIn","extraReducers","authOperations","fulfilled","state","action","getAllContacts","get","createContact","deleteContact","delete","contactsSlice","patch","id","contact","number","allContacts","contactsOperations","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","authPersistConfig","key","storage","whitelist","blacklist","store","configureStore","reducer","contacts","auth","persistReducer","filtered","devTools","process","persistStore","Header","styled","header","LinkContainer","div","getIsLoggedIn","getUserName","Navigation","useSelector","authSelectors","exact","to","Button","sx","mr","variant","href","disabled","style","marginLeft","AuthNavigation","ml","Container","Title","h2","Accent","span","UserMenu","dispatch","useDispatch","CssBaseline","type","onClick","AppBar","theme","IconButton","palette","mode","HomeView","Typography","component","FormWrapper","MaterialLoginView","maxWidth","Box","marginTop","display","flexDirection","alignItems","Avatar","m","bgcolor","onSubmit","event","preventDefault","FormData","currentTarget","password","noValidate","mt","TextField","margin","required","fullWidth","label","autoComplete","autoFocus","mb","Grid","container","item","xs","Link","Form","form","Label","Input","input","Btn","button","ContactForm","useState","setName","setNumber","nameInputId","uuidv4","numberInputId","handleFormChange","e","value","formReset","htmlFor","placeholder","pattern","title","onChange","getFiltered","Filter","ListItem","li","Name","p","Number","BtnDelete","ContactItem","paddingTop","marginRight","width","List","ul","ContactList","useEffect","map","h1","SubTitle","ContactsView","MaterialSignUpView","newUser","spacing","justifyContent","App","darkTheme","setDarkTheme","React","createTheme","ThemeProvider","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2ffb05a9.chunk.js","sourcesContent":["import { createAction } from '@reduxjs/toolkit';\n// import { v4 as uuidv4 } from 'uuid';\n\nexport const changeFilter = createAction('contacts/filtered');\n\n// Code without RTK-----------------------------------\n//---------------------------\n//async actions\n//  Pending\n// export const fetchContactsRequest = createAction(\n//   'contacts/fetchContactsRequest',\n// );\n//  Fulfilled\n// export const fetchContactsSuccess = createAction(\n//   'contacts/fetchContactsSuccess',\n// );\n//  Rejected\n// export const fetchContactsError = createAction('contacts/fetchContactsError');\n//если использовать createAsyncThunk из React-Toolkit\n//то async actions будут создаваться автоматически, объявлять их не нужно\n//---------------------------\n\n// export const addContact = createAction(\n//   'contacts/addContact',\n//   (name, number) => {\n//     return {\n//       payload: {\n//         id: uuidv4(),\n//         name: name,\n//         number: number,\n//       },\n//     };\n//   },\n// );\n\n// export const deleteContact = createAction('contacts/delete');\n// export const changeFilter = createAction('contacts/filtered');\n\n//-----------no react-toolkit actions version\n// export const addContact = (name, number) => ({\n//   type: actions.ADD_CONTACT,\n//   payload: {\n//     id: uuidv4(),\n//     name: name,\n//     number: number,\n//   },\n// });\n\n// export const deleteContact = id => ({\n//   type: actions.DELETE_CONTACT,\n//   payload: id,\n// });\n\n// export const changeFilter = value => ({\n//   type: actions.FILTERED,\n//   payload: value,\n// });\n","import { createReducer } from '@reduxjs/toolkit';\nimport * as actions from './contacts-actions';\n\nconst initinalFilterState = '';\nexport const filteredReducer = createReducer(initinalFilterState, {\n  [actions.changeFilter]: (_, { payload }) => payload,\n});\n\n// Code without RTK-----------------------------------\n// const contactsReducer = createReducer(initialContactsState, {\n//   [actions.fetchContactsSuccess]: (_, { payload }) => payload,\n//   //вариант с createAsyncThunk\n//   // [fetchContacts.fulfilled]: (_, { payload }) => payload,\n\n//   [actions.addContact]: (state, { payload }) => {\n//     if (state.find(item => item.name === payload.name)) {\n//       alert(`${payload.name + ' is already in contacts'}`);\n//       return state;\n//     }\n//     return [...state, payload];\n//   },\n\n//   [actions.deleteContact]: (state, { payload }) =>\n//     state.filter(contact => contact.id !== payload),\n// });\n\n// const loadingReducer = createReducer(false, {\n//   [actions.fetchContactsRequest]: () => true,\n//   [actions.fetchContactsSuccess]: () => false,\n//   [actions.fetchContactsError]: () => false,\n//   //вариант с createAsyncThunk\n//   // [fetchContacts.pending]: () => true,\n//   // [fetchContacts.fulfilled]: () => false,\n//   // [fetchContacts.rejected]: () => false,\n// });\n\n// const errorReducer = createReducer(null, {\n//   [actions.fetchContactsError]: (_, { payload }) => payload,\n//   //сброс ошибки в дефолтное состояние\n//   [actions.fetchContactsRequest]: () => null,\n//   //вариант с createAsyncThunk\n//   // [fetchContacts.rejected]: (_, { payload }) => payload,\n//   // //сброс ошибки в дефолтное состояние\n//   // [fetchContacts.pending]: () => null,\n// });\n\n// const initinalFilterState = '';\n// const filteredReducer = createReducer(initinalFilterState, {\n//   [actions.changeFilter]: (_, { payload }) => payload,\n// });\n\n// export const phoneBookReducer = combineReducers({\n//   contacts: contactsReducer,\n//   isLoading: loadingReducer,\n//   error: errorReducer,\n//   filtered: filteredReducer,\n// });\n","import axios from 'axios';\nimport { createAsyncThunk } from '@reduxjs/toolkit';\n\naxios.defaults.baseURL = 'https://connections-api.herokuapp.com/';\n\nconst token = {\n  set(token) {\n    axios.defaults.headers.common.Authorization = `Bearer ${token}`;\n  },\n  unset() {\n    axios.defaults.headers.common.Authorization = '';\n  },\n};\n\nexport const signup = createAsyncThunk('auth/signup', async credentials => {\n  try {\n    const { data } = await axios.post('users/signup', credentials);\n    token.set(data.token);\n    return data;\n  } catch (error) {}\n});\n\nexport const logIn = createAsyncThunk('auth/login', async credentials => {\n  console.log(credentials);\n  try {\n    const { data } = await axios.post('users/login', credentials);\n    token.set(data.token);\n    return data;\n  } catch (error) {}\n});\n\nexport const logOut = createAsyncThunk('auth/logout', async credentials => {\n  try {\n    await axios.post('users/logout', credentials);\n    token.unset();\n  } catch (error) {}\n});\n","import { createSlice } from '@reduxjs/toolkit';\nimport * as authOperations from './auth-operations.js';\n// import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react';\n\nconst initialState = {\n  user: { name: null, email: null },\n  token: null,\n  isLoggedIn: false,\n};\n\n// const token = {\n//   set(token) {\n//     axios.defaults.headers.common.Authorization = `Bearer ${token}`;\n//   },\n//   unset(token) {\n//     axios.defaults.headers.common.Authorization = '';\n//   },\n// };\n\nexport const authSlice = createSlice({\n  name: 'auth',\n  initialState,\n  extraReducers: {\n    [authOperations.signup.fulfilled](state, action) {\n      state.user = action.payload.user;\n      state.token = action.payload.token;\n      state.isLoggedIn = true;\n    },\n    [authOperations.logIn.fulfilled](state, action) {\n      state.user = action.payload.user;\n      state.token = action.payload.token;\n      state.isLoggedIn = true;\n    },\n    [authOperations.logOut.fulfilled](state, _) {\n      state.user = { name: null, email: null };\n      state.token = null;\n      state.isLoggedIn = false;\n    },\n  },\n});\n\n// export const authApi = createApi({\n//   reducerPath: 'authApi',\n//   baseQuery: fetchBaseQuery({\n//     baseUrl: 'https://connections-api.herokuapp.com/',\n//   }),\n//   tagTypes: ['users'],\n//   endpoints: builder => ({\n//     // Создание нового пользователя\n//     createUser: builder.mutation({\n//       query: newUser => ({\n//         url: `users/signup`,\n//         method: 'POST',\n//         body: newUser,\n//       }),\n//       invalidatesTags: ['users'],\n//     }),\n//     logInUser: builder.mutation({\n//       query: user => ({\n//         url: `users/signup`,\n//         method: 'POST',\n//         body: user,\n//       }),\n//       invalidatesTags: ['users'],\n//     }),\n//     logOutUser: builder.mutation({\n//       query: user => ({\n//         url: `users/signup`,\n//         method: 'POST',\n//         body: user,\n//         header: {\n//           Authorization: token,\n//         },\n//       }),\n//       invalidatesTags: ['users'],\n//     }),\n//     // Удаление контакта\n//     // deleteContact: builder.mutation({\n//     //   query: id => ({\n//     //     url: `/contacts/${id}`,\n//     //     method: 'DELETE',\n//     //   }),\n//     //   invalidatesTags: ['Contacts'],\n//     // }),\n//     // Фильтр по имени\n//     // getContactByName: builder.query({\n//     //   query: id => `/contacts/${id}`,\n//     // }),\n//   }),\n// });\n\n// export const { useCreateUserMutation, useCreateUserMutation } = authApi;\n","// // Code without RTK-----------------------------------\n// import * as actions from './contacts-actions';\n// import * as contactsAPI from 'services/contacts-api';\n// // import { createAsyncThunk } from '@reduxjs/toolkit';\n\n// export const fetchContacts = () => async dispatch => {\n//   dispatch(actions.fetchContactsRequest());\n\n//   try {\n//     const contacts = await contactsAPI.fetchContacts();\n//     dispatch(actions.fetchContactsSuccess(contacts));\n//   } catch (error) {\n//     dispatch(actions.fetchContactsError(error));\n//   }\n// };\n\n// // вариант с createAsyncThunk (actions создаются под капотом, автоматически)\n// export const fetchContacts = createAsyncThunk(\n//   'contacts/fetchContactsStatus',\n//   async () => {\n//     const contacts = await contactsAPI.fetchContacts();\n//     return contacts;\n//   },\n// );\n\nimport axios from 'axios';\nimport { createAsyncThunk } from '@reduxjs/toolkit';\n\naxios.defaults.baseURL = 'https://connections-api.herokuapp.com';\n\nconst token = {\n  set(token) {\n    axios.defaults.headers.common.Authorization = `Bearer ${token}`;\n  },\n  unset() {\n    axios.defaults.headers.common.Authorization = '';\n  },\n};\n\nexport const getAllContacts = createAsyncThunk(\n  'contacts/get-contacts',\n  async credentials => {\n    try {\n      const { data } = await axios.get('/contacts', credentials);\n\n      return data;\n    } catch (error) {}\n  },\n);\n\nexport const createContact = createAsyncThunk(\n  'contacts/create-contact',\n  async credentials => {\n    try {\n      const { data } = await axios.post('/contacts', credentials);\n\n      return data;\n    } catch (error) {}\n  },\n);\n\nexport const deleteContact = createAsyncThunk(\n  'contacts/delete-contact',\n  async credentials => {\n    try {\n      const { data } = await axios.delete(\n        `/contacts/${credentials}`,\n        credentials,\n      );\n\n      return data;\n    } catch (error) {}\n  },\n);\n\nexport const updateContact = createAsyncThunk(\n  'contacts/update-contact',\n  async credentials => {\n    try {\n      await axios.patch(`/contacts/${credentials.id}`, credentials);\n    } catch (error) {}\n  },\n);\n","import { createSlice } from '@reduxjs/toolkit';\nimport * as contactsOperations from './contacts-operations.js';\n\nconst initialState = {\n  contact: { name: null, number: null },\n  allContacts: null,\n  token: null,\n};\n\nexport const contactsSlice = createSlice({\n  name: 'contacts',\n  initialState,\n  extraReducers: {\n    [contactsOperations.getAllContacts.fulfilled](state, action) {\n      state.allContacts = action.payload;\n      state.token = action.payload.token;\n    },\n    [contactsOperations.createContact.fulfilled](state, action) {\n      state.contact = action.payload;\n      state.token = action.payload.token;\n    },\n    [contactsOperations.deleteContact.fulfilled](state, action) {\n      state.contact = action.payload;\n      state.token = action.payload.token;\n    },\n  },\n});\n\n// import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react';\n\n// export const contactsApi = createApi({\n//   reducerPath: 'contactsApi',\n//   baseQuery: fetchBaseQuery({\n//     baseUrl: 'https://61708a5f23781c0017289a96.mockapi.io/api/v1/',\n//   }),\n//   tagTypes: ['Contacts'],\n//   endpoints: builder => ({\n//     //фетч всех контактов из DB\n//     getAllContacts: builder.query({\n//       //по умолчанию метод GET (method: 'GET')\n//       query: () => `/contacts`,\n//       providesTags: ['Contacts'],\n//     }),\n//     // Создание нового контакта\n//     createContact: builder.mutation({\n//       query: newContact => ({\n//         url: `/contacts`,\n//         method: 'POST',\n//         body: newContact,\n//       }),\n//       invalidatesTags: ['Contacts'],\n//     }),\n//     // Удаление контакта\n//     deleteContact: builder.mutation({\n//       query: id => ({\n//         url: `/contacts/${id}`,\n//         method: 'DELETE',\n//       }),\n//       invalidatesTags: ['Contacts'],\n//     }),\n//     // Фильтр по имени\n//     // getContactByName: builder.query({\n//     //   query: id => `/contacts/${id}`,\n//     // }),\n//   }),\n// });\n\n// export const {\n//   useGetAllContactsQuery,\n//   useCreateContactMutation,\n//   useDeleteContactMutation,\n//   useGetContactByNameQuery,\n// } = contactsApi;\n","import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\nimport { filteredReducer } from './contacts/contacts-reducer';\nimport {\n  persistStore,\n  persistReducer,\n  FLUSH,\n  REHYDRATE,\n  PAUSE,\n  PERSIST,\n  PURGE,\n  REGISTER,\n} from 'redux-persist';\nimport storage from 'redux-persist/lib/storage';\n// import logger from 'redux-logger';\n// import { contactsApi } from './contacts/contacts-slice';\n// import { authApi } from './auth/auth-slice';\nimport { authSlice } from './auth/auth-slice';\nimport { contactsSlice } from './contacts/contacts-slice';\n\nconst middleware = [\n  ...getDefaultMiddleware({\n    serializableCheck: {\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\n    },\n  }),\n  // logger,\n];\n\nconst authPersistConfig = {\n  key: 'auth',\n  storage,\n  whitelist: ['token'],\n  blacklist: ['filtered'],\n};\n\nexport const store = configureStore({\n  reducer: {\n    // [contactsApi.reducerPath]: contactsApi.reducer,\n\n    contacts: contactsSlice.reducer,\n    auth: persistReducer(authPersistConfig, authSlice.reducer),\n    // [authApi.reducerPath]: persistReducer(authPersistConfig, authApi.reducer),\n    filtered: filteredReducer,\n  },\n  // middleware: [...middleware, contactsApi.middleware],\n  middleware: middleware,\n  devTools: process.env.NODE_ENV === 'development',\n});\n\nexport const persistor = persistStore(store);\n\n// Code without RTK-----------------------------------\n// const middleware = [\n//   ...getDefaultMiddleware({\n//     serializableCheck: {\n//       ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\n//     },\n//   }),\n//   logger,\n// ];\n\n//Просмотр фунций-прослоек в console.log\n// console.log(middleware);\n\n//-----------------------------------------\n// стейт в localstorage, без phoneBookReducer.filtered(добавил blacklist)\n// const contactsPersistConfig = {\n//   key: 'contacts',\n//   storage,\n//   blacklist: ['filtered'],\n// };\n\n// export const store = configureStore({\n//   reducer: {\n//     // вариант объекта с local storage, также раскоментировать PersistGate в index.js\n//     // phonebook: persistReducer(contactsPersistConfig, phoneBookReducer),\n//     phonebook: phoneBookReducer,\n//   },\n//   middleware,\n//   devTools: process.env.NODE_ENV === 'development', //по умолчанию true, можно не указывать их в объекте, включаем только в режиме разработки через NODE_ENV\n// });\n//-----------------------------------------\n\n//----------------------------------------- весь стейт в localstorage\n// const contactsPersistConfig = {\n//   key: 'contacts',\n//   storage,\n// };\n// const rootReducer = combineReducers({\n//   phonebook: phoneBookReducer, //объект из rootReducer\n// });\n\n// const persistedReducer = persistReducer(persistConfig, rootReducer);\n\n// export const store = configureStore({\n//   reducer: persistedReducer,\n//   middleware,\n//   devTools: process.env.NODE_ENV === 'development', //по умолчанию true, можно не указывать их в объекте, включаем только в режиме разработки через NODE_ENV\n// });\n//-----------------------------------------\n\n// export const persistor = persistStore(store);\n","import styled from '@emotion/styled';\n\nexport const Header = styled.header`\n  padding: 10px;\n  display: flex;\n  justify-content: space-between;\n  background-color: #ffffff3d;\n  border-bottom: 1px solid #c7c7c7;\n  /* box-shadow: 1px 3px 10px -4px #050505; */\n  align-items: center;\n`;\n","import styled from '@emotion/styled';\n\nexport const LinkContainer = styled.div`\n  display: flex;\n`;\n// export const LinkWrapper = styled.div`\n//   margin: 0px 10px 0px 0px;\n//   padding: 5px 15px 5px 15px;\n//   color: white;\n//   background-color: #1976d2;\n//   border: none;\n//   border-radius: 3px;\n//   cursor: pointer;\n//   /* box-shadow: 1px 3px 10px -4px #050505; */\n//   &:hover,\n//   &:focus {\n//     background-color: #0b6e6e;\n//     color: white;\n//   }\n//   @media (max-width: 550px) {\n//     margin: 0px 0px 5px 0px;\n//   }\n// `;\n","export const getIsLoggedIn = state => state.auth.isLoggedIn;\nexport const getUserName = state => state.auth.user.name;\n","import { NavLink } from 'react-router-dom';\nimport { LinkContainer } from './Navigation.styled';\nimport { useSelector } from 'react-redux';\nimport * as authSelectors from '../../redux/auth/auth-selectors';\nimport { FaLock } from 'react-icons/fa';\n//-------------------------------------\nimport Button from '@mui/material/Button';\n\nexport const Navigation = () => {\n  const isLoggedIn = useSelector(authSelectors.getIsLoggedIn);\n\n  return (\n    <LinkContainer>\n      <NavLink exact to=\"/\">\n        <Button sx={{ mr: 1 }}>Home</Button>\n      </NavLink>\n\n      {isLoggedIn ? (\n        <NavLink exact to=\"/contacts\">\n          <Button variant=\"outlined\">Contacts</Button>\n        </NavLink>\n      ) : (\n        <Button href=\"#text-buttons\" disabled>\n          Contacts\n          <FaLock style={{ marginLeft: 5 }} />\n        </Button>\n      )}\n    </LinkContainer>\n  );\n};\n","import styled from '@emotion/styled';\n\nexport const LinkContainer = styled.div`\n  display: flex;\n`;\n// export const LinkWrapper = styled.div`\n//   margin: 0px 10px 0px 0px;\n//   padding: 5px 15px 5px 15px;\n//   color: white;\n//   background-color: teal;\n//   border: none;\n//   border-radius: 3px;\n//   cursor: pointer;\n//   /* box-shadow: 1px 3px 10px -4px #050505; */\n//   &:hover,\n//   &:focus {\n//     background-color: #0b6e6e;\n//     color: white;\n//   }\n//   @media (max-width: 550px) {\n//     margin: 0px 0px 5px 0px;\n//   }\n// `;\n","import { NavLink } from 'react-router-dom';\nimport { LinkContainer } from './AuthNavigation.styled';\n\n//-------------------------------------\nimport Button from '@mui/material/Button';\n\nexport const AuthNavigation = () => {\n  return (\n    <LinkContainer>\n      {/* <LinkWrapper>\n        <NavLink to=\"/register\">Register</NavLink>\n      </LinkWrapper> */}\n\n      <NavLink to=\"/login\">\n        <Button variant=\"outlined\">Log in</Button>\n      </NavLink>\n\n      <NavLink to=\"/signup\">\n        <Button variant=\"outlined\" sx={{ ml: 1 }}>\n          Sign Up\n        </Button>\n      </NavLink>\n    </LinkContainer>\n  );\n};\n","import styled from '@emotion/styled';\n\nexport const Container = styled.div`\n  display: flex;\n  justify-content: space-between;\n`;\nexport const Title = styled.h2`\n  padding: 5px;\n  font-weight: 400;\n`;\nexport const Accent = styled.span`\n  font-weight: 600;\n  font-size: 24px;\n`;\n// export const Button = styled.div`\n//   margin: 0px 10px 0px 0px;\n//   padding: 5px 15px 5px 15px;\n//   color: white;\n//   background-color: teal;\n//   border: none;\n//   border-radius: 3px;\n//   cursor: pointer;\n//   /* box-shadow: 1px 3px 10px -4px #050505; */\n//   &:hover,\n//   &:focus {\n//     background-color: #0b6e6e;\n//     color: white;\n//   }\n//   @media (max-width: 550px) {\n//     margin: 0px 0px 5px 0px;\n//   }\n// `;\n","import { useSelector, useDispatch } from 'react-redux';\nimport * as authSelectors from '../../redux/auth/auth-selectors';\nimport * as authOperations from '../../redux/auth/auth-operations';\nimport { Container, Title, Accent } from './UserMenu.styled';\n//---------------------------------------\nimport Button from '@mui/material/Button';\nimport CssBaseline from '@mui/material/CssBaseline';\n\nexport const UserMenu = () => {\n  const dispatch = useDispatch();\n  const name = useSelector(authSelectors.getUserName);\n\n  return (\n    <CssBaseline>\n      <Container>\n        <Title>\n          Online: <Accent>{name}</Accent>\n        </Title>\n        <Button\n          sx={{ ml: 1 }}\n          variant=\"contained\"\n          type=\"button\"\n          onClick={() => dispatch(authOperations.logOut())}\n        >\n          Log out\n        </Button>\n      </Container>\n    </CssBaseline>\n  );\n};\n","import { Header } from '../AppBar/AppBar.styled';\nimport { Navigation } from '../Navigation/Navigation';\nimport { AuthNavigation } from '../AuthNavigation/AuthNavigation';\nimport { UserMenu } from '../UserMenu/UserMenu';\nimport { useSelector } from 'react-redux';\nimport * as authSelectors from '../../redux/auth/auth-selectors';\n// -----------------------------------\nimport CssBaseline from '@mui/material/CssBaseline';\nimport IconButton from '@mui/material/IconButton';\nimport Brightness4Icon from '@mui/icons-material/Brightness4';\nimport Brightness7Icon from '@mui/icons-material/Brightness7';\n\nexport const AppBar = ({ onClick, theme }) => {\n  const isLoggedIn = useSelector(authSelectors.getIsLoggedIn);\n\n  return (\n    <CssBaseline>\n      <Header>\n        <Navigation />\n        <IconButton sx={{ ml: 1 }} onClick={onClick}>\n          {theme.palette.mode === 'dark' ? (\n            <Brightness7Icon />\n          ) : (\n            <Brightness4Icon />\n          )}\n        </IconButton>\n        {!isLoggedIn ? <AuthNavigation /> : <UserMenu />}\n      </Header>\n    </CssBaseline>\n  );\n};\n","import styled from '@emotion/styled';\n\nexport const Container = styled.div`\n  margin: 10px auto 20px;\n  padding: 100px 10px;\n\n  background-color: #ffffff3d;\n  /* border: 1px solid #1976d2; */\n  /* border-radius: 5px; */\n  /* box-shadow: 1px 3px 10px -4px #050505; */\n`;\n\nexport const Title = styled.div`\n  text-align: center;\n`;\n","import { Container, Title } from './HomwView.styled';\n//-----------------------------------\nimport CssBaseline from '@mui/material/CssBaseline';\nimport Typography from '@mui/material/Typography';\n\nexport const HomeView = () => {\n  return (\n    <CssBaseline>\n      <Container>\n        <Title>\n          <Typography variant=\"h2\" component=\"h2\">\n            Wellcome to Phonebook-App\n          </Typography>\n        </Title>\n      </Container>\n    </CssBaseline>\n  );\n};\n","import styled from '@emotion/styled';\n\nexport const FormWrapper = styled.div`\n  margin: 10px auto 20px;\n  padding: 30px 10px;\n\n  background-color: #ffffff3d;\n  border-radius: 3px;\n`;\n","import * as React from 'react';\nimport Avatar from '@mui/material/Avatar';\nimport Button from '@mui/material/Button';\nimport CssBaseline from '@mui/material/CssBaseline';\nimport TextField from '@mui/material/TextField';\nimport Link from '@mui/material/Link';\nimport Grid from '@mui/material/Grid';\nimport Box from '@mui/material/Box';\nimport LockOutlinedIcon from '@mui/icons-material/LockOutlined';\nimport Typography from '@mui/material/Typography';\nimport Container from '@mui/material/Container';\n//-------------------------------------------------\nimport { FormWrapper } from './MaterialLoginView.styled';\nimport { useDispatch } from 'react-redux';\nimport * as authOperations from '../../redux/auth/auth-operations';\n\nexport const MaterialLoginView = () => {\n  const dispatch = useDispatch();\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    const data = new FormData(event.currentTarget);\n    // eslint-disable-next-line no-console\n    // console.log({\n    //   email: data.get('email'),\n    //   password: data.get('password'),\n    // });\n\n    const user = {\n      email: data.get('email'),\n      password: data.get('password'),\n    };\n    dispatch(authOperations.logIn(user));\n  };\n\n  return (\n    <Container component=\"main\" maxWidth=\"xs\">\n      <CssBaseline />\n      <Box\n        sx={{\n          marginTop: 8,\n          display: 'flex',\n          flexDirection: 'column',\n          alignItems: 'center',\n        }}\n      >\n        <Avatar sx={{ m: 1, bgcolor: 'secondary.main' }}>\n          <LockOutlinedIcon />\n        </Avatar>\n        <Typography component=\"h1\" variant=\"h5\">\n          Log in\n        </Typography>\n        <FormWrapper>\n          <Box\n            component=\"form\"\n            onSubmit={handleSubmit}\n            noValidate\n            sx={{ mt: 1 }}\n          >\n            <TextField\n              margin=\"normal\"\n              required\n              fullWidth\n              id=\"email\"\n              label=\"Email Address\"\n              name=\"email\"\n              autoComplete=\"email\"\n              autoFocus\n            />\n            <TextField\n              margin=\"normal\"\n              required\n              fullWidth\n              name=\"password\"\n              label=\"Password\"\n              type=\"password\"\n              id=\"password\"\n              autoComplete=\"current-password\"\n            />\n\n            <Button\n              type=\"submit\"\n              fullWidth\n              variant=\"contained\"\n              sx={{ mt: 3, mb: 2 }}\n            >\n              Sign In\n            </Button>\n            <Grid container>\n              <Grid item xs></Grid>\n              <Grid item>\n                <Link href=\"/signup\" variant=\"body2\">\n                  {\"Don't have an account? Sign Up\"}\n                </Link>\n              </Grid>\n            </Grid>\n          </Box>\n        </FormWrapper>\n      </Box>\n    </Container>\n  );\n};\n","import styled from '@emotion/styled';\n\nexport const Container = styled.div`\n  margin: 0 auto 20px;\n  padding: 20px 10px;\n\n  max-width: 800px;\n\n  background-color: #fff;\n  border: 1px solid teal;\n  border-radius: 5px;\n  box-shadow: 1px 3px 10px -4px #050505;\n`;\nexport const Form = styled.form`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  flex-direction: column;\n`;\nexport const Label = styled.label`\n  color: rgb(111, 121, 124);\n  font-size: 15px;\n  line-height: 20px;\n\n  &:not(last-child) {\n    margin-bottom: 10px;\n  }\n`;\nexport const Input = styled.input`\n  display: block;\n  padding: 5px 5px;\n\n  border-color: teal;\n  border-radius: 5px;\n\n  &:focus,\n  &:focus-visible,\n  &:active {\n    display: block;\n    padding: 5px 5px;\n\n    border-color: red;\n    outline-color: red;\n  }\n`;\nexport const Btn = styled.button`\n  display: inline-block;\n  padding: 10px 30px;\n  width: 180px;\n\n  margin-top: 40px;\n\n  border: 0.1em solid #353434;\n\n  border-radius: 5px;\n  box-sizing: border-box;\n  text-decoration: none;\n  font-family: 'Roboto', sans-serif;\n  font-weight: 300;\n  color: #fff;\n  background-color: teal;\n  text-align: center;\n  transition: all 0.3s;\n  cursor: pointer;\n\n  &:focus,\n  &:focus-visible,\n  &:active {\n    color: #000000;\n    background-color: #92f9f952;\n    box-shadow: 1px 3px 10px -4px #050505;\n  }\n`;\n","import PropTypes from 'prop-types';\nimport { useState } from 'react';\nimport { v4 as uuidv4 } from 'uuid';\nimport { Container, Form, Label, Input, Btn } from './ContactForm.styled';\nimport * as contactsOperations from '../../../redux/contacts/contacts-operations';\nimport { useDispatch } from 'react-redux';\n// import {\n//   useCreateContactMutation,\n//   useGetAllContactsQuery,\n// } from 'redux/contacts/contacts-slice';\n\nconst ContactForm = () => {\n  const dispatch = useDispatch();\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n  // const [createContact] = useCreateContactMutation();\n  // const { data } = useGetAllContactsQuery('');\n\n  const nameInputId = uuidv4();\n  const numberInputId = uuidv4();\n\n  const handleFormChange = e => {\n    const { name, value } = e.currentTarget;\n\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n      case 'number':\n        setNumber(value);\n        break;\n      default:\n        return;\n    }\n  };\n\n  const handleOnSubmit = e => {\n    e.preventDefault();\n\n    dispatch(contactsOperations.createContact({ name, number }));\n    dispatch(contactsOperations.getAllContacts());\n\n    // if (data.find(item => item.name === name)) {\n    //   alert(`${name + ' is already in contacts'}`);\n    //   return;\n    // }\n    // createContact(newContact);\n    formReset();\n  };\n\n  const formReset = () => {\n    setName('');\n    setNumber('');\n  };\n\n  return (\n    <Container>\n      <Form onSubmit={handleOnSubmit}>\n        <Label htmlFor={nameInputId}>\n          Name\n          <Input\n            type=\"text\"\n            placeholder=\"Mark Zuckerberg\"\n            name=\"name\"\n            value={name}\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n            required\n            onChange={handleFormChange}\n            id={nameInputId}\n          />\n        </Label>\n\n        <Label htmlFor={numberInputId}>\n          Number\n          <Input\n            type=\"tel\"\n            placeholder=\"xxx-xx-xx\"\n            name=\"number\"\n            value={number}\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n            required\n            onChange={handleFormChange}\n            id={numberInputId}\n          />\n        </Label>\n\n        <Btn type=\"submit\">Add contact</Btn>\n      </Form>\n    </Container>\n  );\n};\n\nContactForm.propTypes = {\n  contacts: PropTypes.array,\n  onSubmit: PropTypes.func,\n};\n\nexport default ContactForm;\n","import styled from '@emotion/styled';\n\nexport const Container = styled.div`\n  justify-content: center;\n  text-align: center;\n  padding: 20px 10px;\n`;\nexport const Title = styled.h2`\n  color: rgb(111, 121, 124);\n`;\nexport const Input = styled.input`\n  margin: 0 auto;\n  display: block;\n  padding: 5px 5px;\n\n  border-color: teal;\n  border-radius: 5px;\n\n  &:focus,\n  &:focus-visible,\n  &:focus {\n    display: block;\n    padding: 5px 5px;\n\n    border-color: red;\n    outline-color: red;\n  }\n`;\n","export const getFiltered = state => state.filtered;\n// Code without RTK-----------------------------------\n// export const getFiltered = state => state.phonebook.filtered;\nexport const getAllContacts = state => state.contacts.allContacts;\n","import PropTypes from 'prop-types';\nimport { Container, Title, Input } from './Filter.styled';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { getFiltered } from 'redux/contacts/contacts-selectors';\nimport { changeFilter } from 'redux/contacts/contacts-actions';\n\nconst Filter = () => {\n  const filtered = useSelector(getFiltered);\n  const dispatch = useDispatch();\n\n  return (\n    <Container>\n      <Title>Search by name</Title>\n\n      <Input\n        type=\"text\"\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n        title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n        value={filtered}\n        onChange={e => dispatch(changeFilter(e.currentTarget.value))}\n      />\n    </Container>\n  );\n};\n\nFilter.propTypes = {\n  onChange: PropTypes.func,\n  value: PropTypes.string,\n};\n\nexport default Filter;\n","import styled from '@emotion/styled';\n\nexport const ListItem = styled.li`\n  position: relative;\n  min-width: 160px;\n  width: 22%;\n  padding: 10px 10px;\n  margin: 7px;\n\n  color: rgb(111, 121, 124);\n  font-size: 14px;\n  line-height: 20px;\n\n  background-color: #fff;\n  border: 1px solid teal;\n  border-radius: 5px;\n  box-shadow: 1px 3px 10px -4px #050505;\n\n  transition: transform 0.25s linear, -webkit-transform 0.25s linear;\n  overflow: hidden;\n\n  &:hover {\n    transform: scale(1.1);\n  }\n`;\nexport const Name = styled.p`\n  font-weight: 400;\n`;\nexport const Number = styled.p`\n  font-weight: 600;\n`;\nexport const BtnDelete = styled.button`\n  padding: 5px;\n  font-size: 20px;\n  line-height: 10px;\n  position: absolute;\n  bottom: 0;\n  right: 0;\n  color: teal;\n  border: 0;\n  outline: 0;\n  background-color: transparent;\n  cursor: pointer;\n`;\n","import PropTypes from 'prop-types';\nimport { FaTrashAlt } from 'react-icons/fa';\nimport { IoIosContact } from 'react-icons/io';\nimport { AiFillPhone } from 'react-icons/ai';\nimport Loader from 'react-loader-spinner';\n// import { useDeleteContactMutation } from 'redux/contacts/contacts-slice';\nimport { ListItem, Name, Number, BtnDelete } from './ContactItem.styled';\nimport { useDispatch } from 'react-redux';\nimport * as contactsOperations from '../../../redux/contacts/contacts-operations';\n\nexport const ContactItem = ({ id, name, number }) => {\n  // const [deleteContact, { isLoading: isDeleting }] = useDeleteContactMutation();\n  const handleDeleteContact = () => {\n    dispatch(contactsOperations.deleteContact(id));\n    dispatch(contactsOperations.getAllContacts());\n    return;\n  };\n  const dispatch = useDispatch();\n\n  const a = false;\n  return (\n    <ListItem>\n      <Name>\n        <IoIosContact style={{ paddingTop: '2', marginRight: '5' }} />\n        {name}:\n      </Name>\n      <Number>\n        <AiFillPhone style={{ paddingTop: '2', marginRight: '5' }} />\n        {number}\n      </Number>\n      <BtnDelete type=\"button\" onClick={handleDeleteContact}>\n        {a ? (\n          <Loader type=\"TailSpin\" color=\"teal\" height={16} width={16} />\n        ) : (\n          <FaTrashAlt style={{ width: '15' }} />\n        )}\n      </BtnDelete>\n    </ListItem>\n  );\n};\n\nContactItem.propTypes = {\n  id: PropTypes.string,\n  name: PropTypes.string,\n  number: PropTypes.string,\n  onDeleteBtnPush: PropTypes.func,\n};\n","import styled from '@emotion/styled';\n\nexport const Container = styled.div`\n  max-width: 800px;\n`;\nexport const List = styled.ul`\n  padding: 20px 5px;\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n\n  border: 1px solid teal;\n  border-radius: 5px;\n`;\nexport const ListItem = styled.li`\n  position: relative;\n  min-width: 160px;\n  width: 22%;\n  padding: 10px 15px;\n  margin: 7px;\n\n  color: rgb(111, 121, 124);\n  font-size: 14px;\n  line-height: 20px;\n\n  background-color: #fff;\n  border: 1px solid teal;\n  border-radius: 5px;\n  box-shadow: 1px 3px 10px -4px #050505;\n\n  transition: transform 0.25s linear, -webkit-transform 0.25s linear;\n  overflow: hidden;\n`;\n","import PropTypes from 'prop-types';\nimport { ContactItem } from '../ContactItem/ContactItem';\nimport { useSelector } from 'react-redux';\nimport { getFiltered, getAllContacts } from 'redux/contacts/contacts-selectors';\n// import { useGetAllContactsQuery } from 'redux/contacts/contacts-slice';\nimport { Container, List } from './ContactList.styled';\n\nimport * as contactsOperations from '../../../redux/contacts/contacts-operations';\nimport { useDispatch } from 'react-redux';\nimport { useEffect } from 'react';\n\nconst ContactList = () => {\n  const dispatch = useDispatch();\n  const filtered = useSelector(getFiltered);\n  const contacts = useSelector(getAllContacts);\n\n  useEffect(() => {\n    dispatch(contactsOperations.getAllContacts());\n  }, [dispatch]);\n\n  // const { data } = useGetAllContactsQuery('');\n\n  // const filteredContacts = contacts.filter(item =>\n  //   item.name.toLowerCase().includes(filtered.toLowerCase()),\n  // );\n\n  return (\n    <Container>\n      {contacts && (\n        <List>\n          {contacts.map(({ id, name, number }) => {\n            return <ContactItem key={id} id={id} name={name} number={number} />;\n          })}\n        </List>\n      )}\n    </Container>\n  );\n};\n\nContactList.propTypes = {\n  contacts: PropTypes.arrayOf(PropTypes.object),\n  onDeleteBtnPush: PropTypes.func,\n};\n\nexport default ContactList;\n","import styled from '@emotion/styled';\n\nexport const Container = styled.div`\n  max-width: 800px;\n  margin: 0 auto;\n  padding: 20px 10px;\n`;\nexport const Title = styled.h1`\n  padding: 5px;\n  font-family: 'Gill Sans', 'Gill Sans MT', Calibri, 'Trebuchet MS', sans-serif;\n  color: teal;\n  font-size: 15px;\n  font-weight: 600;\n  line-height: 1.5;\n  font-style: italic;\n\n  display: flex;\n  align-items: center;\n`;\nexport const SubTitle = styled.h2`\n  padding: 5px;\n  font-family: 'Gill Sans', 'Gill Sans MT', Calibri, 'Trebuchet MS', sans-serif;\n  color: teal;\n  font-size: 15px;\n  font-weight: 600;\n  line-height: 1.5;\n  font-style: italic;\n\n  display: flex;\n  align-items: center;\n`;\nexport const LoaderWrapper = styled.div`\n  margin: 0;\n  padding: 0;\n  position: fixed;\n  top: 40%;\n  left: 47%;\n`;\n","import * as authSelectors from '../../redux/auth/auth-selectors';\nimport { useSelector } from 'react-redux';\nimport ContactForm from '../../components/Contacts/ContactForm/ContactForm';\nimport Filter from '../../components/Contacts/Filter/Filter';\nimport ContactList from '../../components/Contacts/ContactList/ContactList';\nimport { RiContactsBook2Fill } from 'react-icons/ri';\nimport { IoMdContacts } from 'react-icons/io';\nimport { Container, Title, SubTitle } from './ContactsView.styled';\n\n// import { useGetAllContactsQuery } from '../../redux/contacts/contacts-slice';\n\nexport const ContactsView = () => {\n  const isLoggedIn = useSelector(authSelectors.getIsLoggedIn);\n  // const { data, error, isFetching } = useGetAllContactsQuery('');\n\n  return (\n    <div>\n      <>\n        {/* {error && <Title>{error.status} Not Found</Title>} */}\n\n        {isLoggedIn && (\n          <Container>\n            <Title>\n              Phonebook <RiContactsBook2Fill style={{ marginLeft: '3' }} />\n            </Title>\n            <ContactForm />\n            <Filter />\n            <SubTitle>\n              Contacts\n              <IoMdContacts style={{ marginLeft: '3' }} />\n            </SubTitle>\n            <ContactList />\n          </Container>\n        )}\n      </>\n    </div>\n  );\n};\n","import styled from '@emotion/styled';\n\nexport const FormWrapper = styled.div`\n  margin: 10px auto 20px;\n  padding: 30px 10px;\n\n  background-color: #ffffff3d;\n  border-radius: 3px;\n`;\n","import * as React from 'react';\nimport Avatar from '@mui/material/Avatar';\nimport Button from '@mui/material/Button';\nimport CssBaseline from '@mui/material/CssBaseline';\nimport TextField from '@mui/material/TextField';\nimport Link from '@mui/material/Link';\nimport Grid from '@mui/material/Grid';\nimport Box from '@mui/material/Box';\nimport LockOutlinedIcon from '@mui/icons-material/LockOutlined';\nimport Typography from '@mui/material/Typography';\nimport Container from '@mui/material/Container';\n//------------------------------------------\nimport { FormWrapper } from './MaterialSignUpView.styled';\nimport { useDispatch } from 'react-redux';\nimport * as authOperations from '../../redux/auth/auth-operations';\n\n// function Copyright(props) {\n//   return (\n//     <Typography\n//       variant=\"body2\"\n//       color=\"text.secondary\"\n//       align=\"center\"\n//       {...props}\n//     >\n//       {'Copyright © '}\n//       <Link color=\"inherit\" href=\"https://mui.com/\">\n//         Your Website\n//       </Link>{' '}\n//       {new Date().getFullYear()}\n//       {'.'}\n//     </Typography>\n//   );\n// }\n\nexport const MaterialSignUpView = () => {\n  const dispatch = useDispatch();\n  const handleSubmit = event => {\n    event.preventDefault();\n    const data = new FormData(event.currentTarget);\n    // eslint-disable-next-line no-console\n    console.log({\n      name: data.get('name'),\n      email: data.get('email'),\n      password: data.get('password'),\n    });\n\n    const newUser = {\n      name: data.get('name'),\n      email: data.get('email'),\n      password: data.get('password'),\n    };\n    dispatch(authOperations.signup(newUser));\n  };\n\n  return (\n    <Container component=\"main\" maxWidth=\"xs\">\n      <CssBaseline />\n      <Box\n        sx={{\n          marginTop: 8,\n          display: 'flex',\n          flexDirection: 'column',\n          alignItems: 'center',\n        }}\n      >\n        <Avatar sx={{ m: 1, bgcolor: 'secondary.main' }}>\n          <LockOutlinedIcon />\n        </Avatar>\n        <Typography component=\"h1\" variant=\"h5\">\n          Sign up\n        </Typography>\n        <FormWrapper>\n          <Box\n            component=\"form\"\n            noValidate\n            onSubmit={handleSubmit}\n            sx={{ mt: 3 }}\n          >\n            <Grid container spacing={2}>\n              <Grid\n                item\n                xs={12}\n                // sm={6}\n              >\n                <TextField\n                  autoComplete=\"given-name\"\n                  name=\"name\"\n                  required\n                  fullWidth\n                  id=\"firstName\"\n                  label=\"Name\"\n                  autoFocus\n                />\n              </Grid>\n              <Grid item xs={12}>\n                <TextField\n                  required\n                  fullWidth\n                  id=\"email\"\n                  label=\"Email Address\"\n                  name=\"email\"\n                  autoComplete=\"email\"\n                />\n              </Grid>\n              <Grid item xs={12}>\n                <TextField\n                  required\n                  fullWidth\n                  name=\"password\"\n                  label=\"Password\"\n                  type=\"password\"\n                  id=\"password\"\n                  autoComplete=\"new-password\"\n                />\n              </Grid>\n            </Grid>\n            <Button\n              type=\"submit\"\n              fullWidth\n              variant=\"contained\"\n              sx={{ mt: 3, mb: 2 }}\n            >\n              Sign Up\n            </Button>\n            <Grid container justifyContent=\"flex-end\">\n              <Grid item>\n                <Link href=\"/login\" variant=\"body2\">\n                  Already have an account? Sign in\n                </Link>\n              </Grid>\n            </Grid>\n          </Box>\n        </FormWrapper>\n      </Box>\n    </Container>\n  );\n};\n","import { Switch, Route } from 'react-router-dom';\nimport { useState } from 'react';\nimport { AppBar } from '../AppBar/AppBar';\nimport { HomeView } from '../../views/HomeView/HomeView';\n// import { RegisterView } from '../../views/RegisterView/RegisterView';\n// import { LoginView } from '../../views/LoginView/LoginView';\nimport { MaterialLoginView } from '../../views/MaterialLoginView/MaterialLoginView';\nimport { ContactsView } from '../../views/ContactsView/ContactsView';\nimport { MaterialSignUpView } from '../../views/MaterialSignUpView/MaterialSignUpView';\n\nimport * as React from 'react';\nimport { createTheme, ThemeProvider } from '@mui/material/styles';\nimport CssBaseline from '@mui/material/CssBaseline';\nimport IconButton from '@mui/material/IconButton';\nimport Brightness4Icon from '@mui/icons-material/Brightness4';\nimport Brightness7Icon from '@mui/icons-material/Brightness7';\n\nconst App = () => {\n  const [darkTheme, setDarkTheme] = useState(false);\n\n  const theme = React.useMemo(\n    () =>\n      createTheme({\n        palette: {\n          mode: darkTheme ? 'dark' : 'light',\n        },\n      }),\n    [darkTheme],\n  );\n\n  const handleThemeChange = () => {\n    if (darkTheme) {\n      setDarkTheme(false);\n      return;\n    }\n    setDarkTheme(true);\n  };\n\n  return (\n    <>\n      <ThemeProvider theme={theme}>\n        <AppBar onClick={handleThemeChange} theme={theme} />\n\n        <Switch>\n          <Route exact path=\"/\" component={HomeView} />\n          {/* <Route path=\"/register\" component={RegisterView} />\n          <Route path=\"/login\" component={LoginView} /> */}\n          <Route exact path=\"/contacts\" component={ContactsView} />\n          <Route path=\"/signup\" component={MaterialSignUpView} />\n          <Route path=\"/login\" component={MaterialLoginView} />\n        </Switch>\n      </ThemeProvider>\n    </>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport {\n  store,\n  // persistor\n} from './redux/store';\n// import { PersistGate } from 'redux-persist/integration/react';\nimport { BrowserRouter } from 'react-router-dom';\nimport './index.css';\nimport App from './components/App/App';\nimport reportWebVitals from './reportWebVitals';\n\n// console.log('STATE ---> ', store.getState());\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      {/* <PersistGate loading={null} persistor={persistor}> */}\n      <BrowserRouter>\n        <App />\n      </BrowserRouter>\n      {/* </PersistGate> */}\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\nreportWebVitals();\n"],"sourceRoot":""}